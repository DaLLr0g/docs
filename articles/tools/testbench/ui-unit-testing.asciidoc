---
title: UI Unit Testing
order: 160
layout: page
---

[[testbench.uiunit]]
= UI Unit Testing

[[testbench.uiunit.introduction]]
== Introduction

UI Unit Testing removes the necessity to run both the browser and the servlet container, to test your Vaadin-based applications faster.

- container-less testing: You do not need to launch the servlet container. UI Unit Testing creates Vaadin Session, the UI and other necessary Vaadin classes straight in the JVM which runs your JUnit tests.
- browser-less testing: You look up components straight from [methodname]`UI.getCurrent()`, bypassing browser and the JavaScript->Server bridge. You directly call methods on your server-side View classes and on the server-side Java Vaadin components.

[[testbench.uiunit.why-unit-testing]]
== Why Unit Testing?

Advantages of unit testing over the end-to-end testing with TestBench:

* Fast: browser-less tests are typically 100x faster than Selenium-based tests and run in 5 to 60 milliseconds, depending on their complexity.
* Reliable: no arbitrary sleeps are needed since test is executed on server-side and it can await until the request is fully processed. No random failures because of Selenium drivers browser incompatibility.
* Headless: the tests run headless since there's no browser. No need to setup screen in your CI environment.
* Robust: the test runs in the same JVM as the server side components. If the server side bootstrap fails and throws an exception, the test method fails with the same exception. No need to go hunting for exceptions in a log located somewhere on a CI server.
* No need to write massive set of Page Objects. You are already on the server, and you have access to the actual Java components which already are providing you with high-level APIs, exactly as Page Objects do.
* Full access to the Database: You're server-side - you can access the database from your tests the same way your business logic accesses the database. You can run a bunch of SQLs to restore the database to a known state before every test. Even better - you can run the test in a transaction then roll back after the test, to perform fast database revert to a known state.

With this technique you can run 600 UI tests in 7 seconds, as opposing to 1 to 2 hours with Selenium-based approach.
Because of the speed, you can let the UI tests run after every commit by your continuous integration server.
Bypassing the browser and talking to Vaadin server API directly, eliminates the need to start the servlet container.
You can add the server jars onto testing classpath and call Vaadin server API which, in turn, invokes your server logic.

[[testbench.uiunit.limitations]]
== Limitations

UI Unit Testing is designed to bypass browser and the servlet container.
This means that it is impossible to test JavaScript code, templates and other client side functionalities.
If you need to test client side features, you need to use TestBench.

[[testbench.uiunit.getting-started]]
== Getting Started

To start Unit testing your Vaadin application, create a class that extends [classname]`UIUnitTest` (for JUnit 5) or [classname]`UIUnit4Test` (for JUnit 4).
Base class instantiates UI along with all necessary Vaadin environment, that will be available on your test methods.

[source,java]
----
class MyViewTest extends KaribuTest {

    @Test
    void extendingBaseClass_runTest_vaadinInstancesAvailable() {
        Assertions.assertNotNull(UI.getCurrent(),
                "Expecting current UI to be available, but was not");
        Assertions.assertNotNull(VaadinService.getCurrent(),
                "Expecting VaadinService to be available up, but was not");
        Assertions.assertNotNull(VaadinRequest.getCurrent(),
                "Expecting VaadinRequest to be available up, but was not");
        Assertions.assertNotNull(VaadinResponse.getCurrent(),
                "Expecting VaadinResponse to be available up, but was not");
        Assertions.assertNotNull(VaadinSession.getCurrent(),
                "Expecting VaadinSession to be available up, but was not");
    }

}
----

By default base class scans whole classpath for routes and error views, but this behaviour can be changed for a faster bootstrap.
To restrict scan to a specific package and its sub-packages, override [methodname]`scanPackage` method and return the package name.

[source,java]
----
class MyViewTest extends KaribuTest {

        @Override
        protected String scanPackage() {
                return MyView.class.getPackageName();
        }

}
----
